Prometheus Installation Guide:
--------------------------------------

1. Windows Exporter

    # Download Windows Exporter
    Invoke-WebRequest -Uri "https://github.com/prometheus-community/windows_exporter/releases/download/v0.29.2/windows_exporter-0.29.2-amd64.msi" -OutFile "windows_exporter.msi"


    # Install Windows Exporter
    Start-Process msiexec.exe -ArgumentList '/i windows_exporter.msi ENABLED_COLLECTORS=cpu,memory,logical_disk LISTEN_PORT=9182' -Wait

    # Validate using:
    http://localhost:9182/metrics


2. Node Exporter for Linux and Mac system

Mac:
    brew install node_exporter
    brew services start node_exporter

Linux:
    # Download Node Exporter
    wget https://github.com/prometheus/node_exporter/releases/download/v1.9.0/node_exporter-1.9.0.linux-amd64.tar.gz

    # Extract the downloaded archive
    tar xvfz node_exporter-1.9.0.linux-amd64.tar.gz

    # Run the exporter
    cd node_exporter-1.9.0.linux-amd64/
    ./node_exporter

Validate: http://localhost:9100/metrics


3. Prometheus

For Windows:

    # Download Prometheus:
    Invoke-WebRequest -Uri "https://github.com/prometheus/prometheus/releases/download/v3.0.1/prometheus-3.0.1.windows-amd64.zip" -OutFile "prometheus.zip"


    # Extract Prometheus:
    Expand-Archive -Path "prometheus.zip" -DestinationPath "C:\Prometheus"


    # Configuration:
    Create Prometheus config file at C:\Prometheus\prometheus.yml:

    sample for windows: promethues\prometheus-win-exporter.yml // copy the content from here and place it inside C:\Prometheus\prometheus.yml

    # Start Prometheus:
    C:\Prometheus\prometheus-3.0.1.windows-amd64\prometheus.exe --config.file=C:\Prometheus\prometheus.yml


For Linxu / Mac:

    # Download Prometheus:
    wget https://github.com/prometheus/prometheus/releases/download/v3.0.1/prometheus-3.0.1.linux-amd64.tar.gz

    # Extract the downloaded archive:
    tar xvfz prometheus-3.0.1.linux-amd64.tar.gz

    # Move to a standard location
    mv prometheus-3.0.1.linux-amd64 /opt/prometheus

    # Configuration:
    Create Prometheus config file at: /etc/prometheus/prometheus.yml

    sample for Linux / Mac: promethues/prometheus-node-exporter.yml // copy the content from here and place it inside /etc/prometheus/prometheus.yml

    # Start Prometheus:
    /opt/prometheus/prometheus --config.file=/etc/prometheus/prometheus.yml


4. Verification

Access Prometheus UI: http://localhost:9090

5. Test queries for metrics:

For Windows:

    # CPU Usage
    100 - (avg by (instance) (rate(windows_cpu_time_total{mode!="idle"}[1m])) * 100)

    # Memory Usage
    100 * (1 - ((windows_memory_available_bytes) / windows_memory_physical_total_bytes))


For Linux / Mac:
   
    # CPU Usage
    100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[1m])) * 100)

    # Memory Usage
    100 * (1 - ((node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes))


Prometheus Installation on Kubernetes:
--------------------------------------

Good from reference purpose only: Helm chart published by community for reference: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack

Steps:

1. Deploy Prometheus along with Namespace, configmaps & service accounts

kubectl apply -f promethues\prometheus-installation.yaml

2. Deploy the node-metrics and kube-state-metrics exporters

kubectl apply -f promethues\exporters.yaml

3. Open the Prometheus UI:

kubectl get svc -n monitoring
Get the Load Balancer URL and Port and open it

4. Key Queries

# Shows all targets
up

# Shows pod states
kube_pod_status_phase

# Shows CPU metrics
container_cpu_usage_seconds_total

# Shows memory metrics
container_memory_working_set_bytes         

# Node Metrics CPU Usage:
100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)

# Node Memory Usage:
(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100

# Pod CPU Usage:
sum(rate(container_cpu_usage_seconds_total{container!=""}[5m])) by (pod)

# Pod Memory Usage:
sum(container_memory_working_set_bytes{container!=""}) by (pod)

Cluster State:
# Pod Status
sum by (phase) (kube_pod_status_phase)

# Node Status
kube_node_status_condition

# Deployment Status
kube_deployment_status_replicas_available